name: "Validations"
on:
  workflow_dispatch:
    inputs:
      run-tmate:
        description: "Start a tmate session"
        required: false
        default: ""
      tmate-duration:
        description: "Tmate session duration"
        required: false
        default: 5

  push:
    branches:
      - main
  pull_request:

env:
  GO_VERSION: "1.19.x"

jobs:

  Static-Analysis:
    name: "Static analysis"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Restore tool cache
        id: tool-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ github.workspace }}/.tmp
          key: ${{ runner.os }}-tool-${{ hashFiles('Makefile') }}

      - name: Restore go cache
        id: go-cache
        uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: (cache-miss) Bootstrap all project dependencies
        if: steps.tool-cache.outputs.cache-hit != 'true' || steps.go-cache.outputs.cache-hit != 'true'
        run: make bootstrap

      - name: Bootstrap CI environment dependencies
        run: make ci-bootstrap

      - name: Run static analysis
        run: make static-analysis

  Unit-Test:
    name: "Unit tests"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Restore tool cache
        id: tool-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ github.workspace }}/.tmp
          key: ${{ runner.os }}-tool-${{ hashFiles('Makefile') }}

      - name: Restore go cache
        id: go-cache
        uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: (cache-miss) Bootstrap all project dependencies
        if: steps.tool-cache.outputs.cache-hit != 'true' || steps.go-cache.outputs.cache-hit != 'true'
        run: make bootstrap

      - name: Bootstrap CI environment dependencies
        run: make ci-bootstrap

      - name: Run unit tests
        run: make unit

      - uses: actions/upload-artifact@v2
        with:
          name: unit-test-results
          path: test/results/**/*

  Integration-Test:
    name: "Integration tests"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Enable systemd for podman socket activation
        run: |
          set -x
          loginctl enable-linger $(whoami)
          
          # we need to make certain that the bus instance is up and ready before systemctl attempts to use it.
          # if we can figure a non-racey way to do this, that would be nice.
          sleep 5
          export XDG_RUNTIME_DIR=/run/user/$UID
          mkdir -p $HOME/.config/systemd/user
          systemctl --user enable --now podman.socket
          sudo systemctl start podman.socket

      - name: Setup tmate session
        if: ${{ github.event.inputs.run-tmate == 'true' }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: ${{ fromJSON(github.event.inputs.tmate-duration) }}
        with:
          limit-access-to-actor: true

      - name: Restore tool cache
        id: tool-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ github.workspace }}/.tmp
          key: ${{ runner.os }}-tool-${{ hashFiles('Makefile') }}

      - name: Restore go cache
        id: go-cache
        uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: (cache-miss) Bootstrap all project dependencies
        if: steps.tool-cache.outputs.cache-hit != 'true' || steps.go-cache.outputs.cache-hit != 'true'
        run: make bootstrap

      - name: Bootstrap CI environment dependencies
        run: make ci-bootstrap

      - name: Build key for test-fixture cache
        run: make integration-fingerprint

      - name: Restore integration test-fixture cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ github.workspace }}/test/integration/test-fixtures/cache
          key: ${{ runner.os }}-integration-test-cache-${{ hashFiles('test/integration/test-fixtures/cache.fingerprint') }}

      - name: Build key for tool cache
        run: make integration-tools-fingerprint

      - name: Restore integration tool cache
        id: integration-tool-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ github.workspace }}/test/integration/tools/cache
          key: ${{ runner.os }}-integration-tools-cache-${{ hashFiles('test/integration/tools/cache.fingerprint') }}

      - name: (cache-hit) Load integration tool cache
        if: steps.integration-tool-cache.outputs.cache-hit == 'true'
        run: make integration-tools-load

      - name: Run integration tests
        run: make integration

  Benchmark-Test:
    name: "Benchmark tests"
    runs-on: ubuntu-20.04
    # note: we want benchmarks to run on pull_request events in order to publish results to a sticky comment, and
    # we also want to run on push such that merges to main are recorded to the cache. For this reason we don't filter
    # the job by event.
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/checkout@v2

      - name: Restore tool cache
        id: tool-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ github.workspace }}/.tmp
          key: ${{ runner.os }}-tool-${{ hashFiles('Makefile') }}

      - name: Restore go cache
        id: go-cache
        uses: actions/cache@v2.1.3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: (cache-miss) Bootstrap all project dependencies
        if: steps.tool-cache.outputs.cache-hit != 'true' || steps.go-cache.outputs.cache-hit != 'true'
        run: make bootstrap

      - name: Bootstrap CI environment dependencies
        run: make ci-bootstrap

      - name: Restore base benchmark result
        uses: actions/cache@v2
        with:
          path: test/results/benchmark-main.txt
          # use base sha for PR or new commit hash for main push in benchmark result key
          key: ${{ runner.os }}-bench-${{ (github.event.pull_request.base.sha != github.event.after) && github.event.pull_request.base.sha || github.event.after }}

      - name: Run benchmark tests
        id: benchmark
        run: |
          REF_NAME=${GITHUB_REF##*/} make benchmark
          OUTPUT=$(make show-benchstat)
          OUTPUT="${OUTPUT//'%'/'%25'}"   # URL encode all '%' characters
          OUTPUT="${OUTPUT//$'\n'/'%0A'}" # URL encode all '\n' characters
          OUTPUT="${OUTPUT//$'\r'/'%0D'}" # URL encode all '\r' characters
          echo "::set-output name=result::$OUTPUT"

      - uses: actions/upload-artifact@v2
        with:
          name: benchmark-test-results
          path: test/results/**/*

      - name: Update PR benchmark results comment
        uses: marocchino/sticky-pull-request-comment@v2
        continue-on-error: true
        with:
          header: benchmark
          message: |
            ### Benchmark Test Results

            <details>
              <summary>Benchmark results from the latest changes vs base branch</summary>

            ```
            ${{ steps.benchmark.outputs.result }}
            ```

            </details>
